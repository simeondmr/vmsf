Document version: 1.0.2

This document contain all info about vmsf architecture.


########################################################################################################################################################
General:
This is a 32 bit stack virtual machine, implemeted for research and fun.
Byte ordering:  little-endian
########################################################################################################################################################





########################################################################################################################################################
Architecture:
1) registers: pc(program counter), sp(stack pointer), bp(base pointer)
2) flags: overflow, carry, zero, negative

Word: 1 byte

Instruction with param width(tot 6 byte):
 +------------ +---------------+
 | opc: 2 byte | param: 4 byte |
 +------------ +---------------+

Instruction without param width(tot 2 byte):
 +------------ +
 | opc: 2 byte |
 +------------ +
 
 
 
Stack architecture:

For manage the stack, vmsf use 2 pointers: sp and bp
This register are really important, because sp point to the first empty cell on the task top, and bp point at the base of the current activation record(this is crucial for functions).
Example of memory for this instructions: nop(0x0000), halt(0x002b)


+----+
|    | <--sp
+----+
+----+
|0x00|
+----+
+----+
|0x2b|
+----+
+----+
|0x00|
+----+
+----+
|0x00| <-- at the start, pc point to the first instruction byte
+----+


** Stack situation, before, during and after a call: **

consider this example:

int test(int a, int b)
{
	return a + b;
}

test(10,11);

Stack before call:

+----+
|    |
+----+
+----+
|    |
+----+
+----+
|    | <-- sp
+----+
+----+
| B  |
+----+
+----+
| C  | <-- bp 
+----+

Stack during call:

+----+
|    | <-- current sp
+----+
+----+
|a+b |
+----+
+----+
| sp |
+----+
+----+
| bp |
+----+
+----+
|flgs|
+----+
+----+
| pc | <-- (old sp) <-- current bp
+----+
+----+
| B  |
+----+
+----+
| C  | <-- (old bp) 
+----+

Stack after call:

+----+
|    | <-- sp
+----+
+----+
|a+b |
+----+
+----+
| B  |
+----+
+----+
| C  | <-- bp
+----+


########################################################################################################################################################




########################################################################################################################################################
ISA:
1)   nop	->  opcode: 0x0000
2)   push	->  opcode: 0x0001
3)   add	->  opcode: 0x0002
4)   sub	->  opcode: 0x0003
5)   mul	->  opcode: 0x0004
6)   div	->  opcode: 0x0005
7)   addc	->  opcode: 0x0006
8)   subc	->  opcode: 0x0007
9)   inc	->  opcode: 0x0008
10)  dec	->  opcode: 0x0009
11)  swap	->  opcode: 0x000a
12)  xor	->  opcode: 0x000b
13)  and	->  opcode: 0x000c
14)  or		->  opcode: 0x000d
15)  not	->  opcode: 0x000e
16)  call	->  opcode: 0x000f
17)  pushpc	->  opcode: 0x0010
18)  jmp	->  opcode: 0x0011
19)  ret	->  opcode: 0x0012
20)  ref	->  opcode: 0x0013
21)  dup	->  opcode: 0x0014
22)  mod	->  opcode: 0x0015
23)  cmp	->  opcode: 0x0016
24)  jmpeq	->  opcode: 0x0017
25)  jmplt	->  opcode: 0x0018
26)  jmpgt	->  opcode: 0x0019
27)  jmple	->  opcode: 0x001a
28)  jmpge	->  opcode: 0x001b
29)  jmpab	->  opcode: 0x001c
30)  jmpbl	->  opcode: 0x001d
31)  jmpae	->  opcode: 0x001e
32)  jmpbe	->  opcode: 0x001f
33)  jmpne	->  opcode: 0x0020
34)  divmod	->  opcode: 0x0021
35)  addsp	->  opcode: 0x0022
36)  subsp	->  opcode: 0x0023
37)  incsp	->  opcode: 0x0024
38)  decsp	->  opcode: 0x0025
39)  unref	->  opcode: 0x0026
40)  pushbp	->  opcode: 0x0027
41)  popbp	->  opcode: 0x0028
42)  pushall	->  opcode: 0x0029
43)  popall	->  opcode: 0x002a
44)  halt   	->  opcode: 0x002b
45)  pushflags	->  opcode: 0x002c
46)  popflags	->  opcode: 0x002d
########################################################################################################################################################


########################################################################################################################################################

How to use vmsf:

At the moment there is no compiler for this machine, so you should write hex code by hand, using an hex editor.
For example if you want to translate this code:

NOP
HALT

you have to write this code: 0x00 0x00 0x2b 0x00, where the first byte is NOP, and the second one is HALT
If you also want to execute the code, you have to compile vmsf using makefile, and you have to write in program param the name of file where there is the code.













